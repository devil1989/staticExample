//页面文件结构
app.js:html页面的入口文件，包含了ReactDOM,container,store,redux的Provider，生成一个React界面
	ReactDOM+redux的Provider，生成一个容器，容器里面传入需要的页面组件container和页面的store

container.js:页面入口，放在app.js里面的入口，对应一个页面 （其实是个多个component组件的集合，这个组件集合是通过redux的connect封装而成，否则无法同步父子兄弟components之间的state）
	action.js: 包含了ajax请求函数，因为dispatch（action）的时候，如果异步的话，需要在action中传入对应的ajax请求
		model.js:ajax请求获取对应参数
	componnets：该页面需要的组件

store.js:用redux封装的好的store，绑定reduce
	reducer.js：获取reducer文件夹中的所有reduce文件，用redux把所有resucer合并起来,可以按照function来拆分成各个reduce
	reducer文件夹中的reduce：真正的reducer，和多个action绑定，每个action都有对应的type和对应执行的最新的data（这个data用于更新state），reducer中执行对应的state更新，用objectAssign({}, state, action.data);



react+redux相关文章：//redux可用可以不用，简单的页面就不用，复杂的页面就用，自己斟酌
	同步：http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html
	异步：http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html



添加一个组件的流程是：
	1.component中添加新组件，通过静态数据和render来展示组件，不涉及逻辑
	2.container中引入组件
	3.action中添加一个改组件相对应的action
		如果是同步的，那只要添加action的名称即可
		如果是异步，不但要添加名称，还得添加一个function，function里面返回一个dispatch =>(){};该dispatch是被封装过的，里面放些ajax请求，ajax的回调函数中用dispatch(ajax返回数据生成的新state)
	4.reducer中添加和action对应的reducer函数，函数里面更新对应的state
	5.UI就自动更新了





/********************************************************************** redux详细讲解 **********************************************************************/


//redux详解(用于管理state):redux是用store.dispatch(action)来执行对应的action，从而自动调用对应的reducer来更新state，改变UI；如果不用redux，那么需要通过this.setState方法来修改state，调用该方法后，react会自动根据state来改变组件的UI

action: 携带了数据的普通js对象，action creator返回的值是这个action类型的对象。然后通过store.dispatch(action creator())进行分发//store.dispatch是同步的

reducer:是个state的生成函数，通过旧的state，和对应的action行为，返回一个新的state

		//重点来了，什么时候用reducer？，reducer不需要额外自己调用，只要绑定对应的state和action，
		//store在调用dispache(action)的时候，会自动执行reduce(state,action)//action是dispache中传入的action，state是自己当前的state，可以通过store.getState()获得
		//

		

store:中心，获取store，生成新store，store监听等
		getState：获取store的state
		subscribe：监听store
		dispache：更新store
			state只能通过dispatch(action)来执行更新，更新逻辑由reducer来执行
					action是一个对象，用于描述一个行为，通常在dispache中，用的是action生成函数，例如dispache（todoAction()）
					todoAction：是返回action的一个函数而已，传入额外的属性，返回对应的action对象（该action对象可能是一个方法，也可能是一个对象）

middleware:发送action和action到达reducer之间的第三方扩展（为了处理异步问题而引入的）



流程：store.dispatch(action) --> reducer(state, action) --> final state --> 根据最新的state来更新组件UI
	//redux中，store和action之间的关联是store.dispatch(action)绑定的
	//redux中，store和reducer之间的关联是在store创建的时候就绑定了的

	执行store.dispatch(actionCreator())后，会自动执行reducer，
	reduce包含2个参数，当前的state和对应的action，会根据当前的state和对应的action，返回最新的state，这里面具体怎么实现的逻辑需要自己写

	四要素：component,action,reducer,state
		component(组件)触发事件，事件中会执行store.dispatch(action)，然后reducer会执行这个action，生成新的state，然后根据新的state来重绘component


备注：全局只有一个store，每个控件对应store中的某个属性，reducer需要和store的属性绑定来更新store中对应的属性，如果reducer绑定了多个action，那么根据action的不同，就会产生不同的state，
	  reducer有多个，一般会用combineReducers来合成一个综合的reducer，这个综合的reducer就是上面说的绑定多个action（即能够修改多个store中的属性）的reducer，reduce合成//一般都是自己写一个集成的reduce函数




//拓展属性
	import { createStore, applyMiddleware,bindActionCreators } from 'redux'
	import { connect,Provider } from 'react-redux'
	import thunk from 'redux-thunk'

	createStore(reducer, []):生成store，第二个参数可选，是默认的store
	Provider:组件最外层，管理store中的state的状态

	applyMiddleware:来自redux可以包装 store 的 dispatch()【该方法可以生成对应的store】,他和thunk一起使用
	thunk：让dispatch接受function作为参数，而不仅仅只能接受action对象;这样做是为了处理dispatch的异步请求，dispatch(action)是同步的

	connect:把state的counter值绑定到props上，把action创建函数绑定到props上（用到了bindActionCreators），返回绑定后的组件
	bindActionCreators:把action创建函数绑定到props上（用到了bindActionCreators）

	dispatch的异步问题（支持了ajax）：通过applyMiddleware，thunk解决了
	组价嵌套调用的时候，state更改



this.props和state区别：
	state:组件状态树，能决定组件的UI展示，state变化是会更新DOM（getInitialState:获取初始的默认state）
	props：属性传递，是父组件传递给子组件的属性，单向的（getDefaultProps:获取初始的默认props）；this.props.children获取所有子组件

	父元素的props修改的时候，如果子元素用了父元素的props的某些属性，redux会把props映射到对应的state，然后通过state来修改对应的UI，因为父元素和子元素
	都用到了对应的那根props，所以映射的时候后获得了对应的state的某个属性值，这样就做到了修改父元素props，能改变父元素和子元素的UI。

	props 就是组件的属性，由外部通过 JSX 属性传入设置，一旦初始设置完成，就可以认为 this.props 是不可更改的，
	所以不要轻易更改设置 this.props 里面的值（虽然对于一个 JS 对象你可以做任何事）。state 是组件的当前状态，
	可以把组件简单看成一个“状态机”，根据状态 state 呈现不同的 UI 展示。一旦状态（数据）更改，
	组件就会自动调用 render 重新渲染 UI，这个更改的动作会通过 this.setState 方法来触发。




//redux到底做了那些事情

1.用store的状态树统一管理各个组件的state，store对应改变，就会map到对应的组件的state，从该改变UI（最终调用this.setState，改变state；state改变后会自动调用state对应的dom元素的render函数）
2.父组件修改props，如果子元素用了父元素的props的某些属性，redux会把props映射到对应的state，实现子组件和父组件同步的UI变更（不建议修改props，他是外部传入，一般不会改变）
3.详细UI变更执行流程：
	1.同步情况下：store.dispatch(action) --> reducer(state, action) --> final state --> 根据最新的state来更新组件UI
				1.1 为了满足store.dispatch执行后，自动执行对应reducer，需要有一个store和reducer的关联
					这个关联是在创建store的时候就已经定制好了的，Redux.createStore(reducer,initialState);
	2.异步情况下：
			2.1 正常dispatch只支持对象类型的action，需要改变store的dispatch方法，让他支持function，在function里面执行ajax，
				在ajax的callback中调用原生的dispatch方法 ：applyMiddleware+thunk来修改store的dispatch;





store.js: redux封装生成新的store的生成函数
	1.1+2.1总和起来，就是创建store时候的执行代码，他生成了一个可以传入初始state的函数，该函数最终会封装传一个支持异步dispatch，而且关联了store和reducer的新store，具体如下，
		import rootReducer from './reducer';
		// import thunk from 'ReduxThunk';

		const finalCreateStore = Redux.compose(
		    Redux.applyMiddleware(ReduxThunk)
		)(Redux.createStore);

		export default function configureStore(initialState) {
		    return finalCreateStore(rootReducer, initialState);
		}


action.js:ajax请求，写action的function 它和reducer一样，不需要做任何特殊处理

	

reducer.js:根据初始的state和action，生成新的state；注意action上挂了新添加的或者改变的state属性对象
	用到了Redux.combineReducers,把多个reducer合成一个


container.js: 页面的集成组件，把整个页面的所有组件封装成一个大组件，同时用ReactRedux.connect和mapStateToProps和mapDispatchToProps方式，
			  解决各个组件的state和dispatch的集成，这样一旦一个组件改变，可以同步到其他组件，用统一的store中的信息来管理state
			  详见container.js

app.js :  页面入口，


